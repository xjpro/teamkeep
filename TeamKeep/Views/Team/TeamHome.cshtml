@model TeamKeep.Models.ViewModels.TeamViewModel
@{
    ViewBag.Title = @Model.Team.Name;
    Layout = "~/Views/Shared/Master.cshtml";
}

<div id="team-info">

    <div id="team-banner" class="container" data-bind="style: { backgroundImage: BannerBackgroundImage }">
        <h1 data-bind="text: Name"></h1>
        <!-- ko if: Editable -->
        <div class="hover-edit" data-toggle="modal" data-target="#team-banner-modal">
            <i class="icon-pencil"></i> Edit banner image
        </div>
        <!-- /ko -->
    </div>

    <div class="container">

        <!-- ko if: Editable -->
        <div id="team-functions" class="btn-group pull-right">
            <!--<button class="btn btn-info">Message Team</button>-->
            <button class="btn btn-info" data-toggle="modal" data-target="#team-settings-modal"><i class="icon-wrench icon-white"></i> Settings</button>
        </div>
        <!-- /ko -->
    
        <!-- ko if: Editable() || (Announcement() != null && Announcement().trim().length > 0) -->
        <div class="row-fluid">
            <div id="team-announcement" class="span12 section">
                <h2>Announcements</h2>
                <!-- ko if: Editable -->
                <textarea rows="4" data-bind="value: Announcement, event: { keydown: ShowAnnouncementOptions }"></textarea>
                <!-- /ko -->
                <!-- ko ifnot: Editable -->
                <textarea rows="4" data-bind="value: Announcement, editable: false"></textarea>
                <!-- /ko -->
                <div class="options">
                    <button class="btn btn-info pull-right" data-bind="click: SaveAnnouncement">
                        <i class="icon-refresh icon-spin" style="display: none"></i> Save Changes
                    </button>
                </div>
            </div>
        </div>
        <!-- /ko -->

    </div>

    <form id="team-settings-modal" class="modal hide fade" data-bind="submit: SaveSettings">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3><i class="icon-wrench"></i> <span data-bind="text: Name() + ' Settings'"></span></h3>
        </div>
        <div class="modal-body">
            <div class="alert alert-error hide">
                <button type="button" class="close" data-dismiss="alert">&times;</button>
                <span></span>
            </div>
            <div id="team-settings">
                <h4>General</h4>
                <ul>
                    <li>
                        <label>Name</label><input type="text" data-bind="value: NewName"/>
                    </li>
                </ul>
                
                <!-- 
                <h4>Event Confirmation</h4>
                <label class="checkbox">
                    <input type="checkbox" data-bind="checked: Settings.ConfirmationEmailMinutes"/> Remind me via e-mail to send event confirmations
                </label> -->

                <h4>Privacy</h4>
                <ul>
                    <li>
                        <label>Home page</label>
                        <span class="info btn-group" data-toggle="buttons-radio">
                            <button class="btn btn-small" data-bind="css: { active: Privacy.HomePage() == true }, click: function() { Privacy.HomePage(true); }">Public</button>
                            <button class="btn btn-small" data-bind="css: { active: Privacy.HomePage() == false }, click: function() { Privacy.HomePage(false); }">Private</button>
                        </span>          
                    </li>
                    <li>
                        <label>Roster tab</label>
                        <span class="info btn-group" data-toggle="buttons-radio">
                            <button class="btn btn-small" data-bind="css: { active: Privacy.Roster() == true }, click: function() { Privacy.Roster(true); }">Public</button>
                            <button class="btn btn-small" data-bind="css: { active: Privacy.Roster() == false }, click: function() { Privacy.Roster(false); }">Private</button>
                        </span>          
                    </li>
                </ul>
                
                <button class="btn btn-link" data-dismiss="modal" data-toggle="modal" data-target="#team-delete-modal">
                    Delete this team
                </button>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn" type="button" data-dismiss="modal">Cancel</button>
            <button class="btn btn-primary">
                <i class="icon-refresh icon-spin" style="display: none"></i> Save settings
            </button>
        </div>
    </form>
    
    <form id="team-delete-modal" class="modal hide fade">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>Are you sure?</h3>
        </div>
        <div class="modal-body">
            <p>Deleting this team will permanently remove all its associated schedule and roster data. This cannot be undone.</p>
            <p>
                If you wish to hide the team tempoararily you can 
                <a data-dismiss="modal" data-toggle="modal" data-target="#team-settings-modal">set its home page to private</a> instead.
            </p>
        </div>
        <div class="modal-footer">
            <button class="btn" type="button" data-dismiss="modal" aria-hidden="true">Cancel</button>
            <button class="btn btn-warning" data-bind="click: DeleteTeam">
                <i class="icon-refresh icon-spin"></i> Yes, please delete
            </button>
        </div>
    </form>
    
    <form id="team-banner-modal" class="modal hide fade" data-bind="submit: SaveBanner">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>Edit banner</h3>
        </div>
        <div class="modal-body">
            <div class="alert alert-error hide">
                <button type="button" class="close" data-dismiss="alert">&times;</button>
                <span></span>
            </div>
            <p>
                Please resize images so as to not exceed 2MB in size. 
                For best results banner images should be wide, short images (height around 200 pixels).
            </p>
            <p>
                <input id="banner-file" type="file" style="display: none"/>
                <div class="input-append">
                    <input id="banner-file-name" type="text"/>
                    <button class="btn btn-info" type="button" onclick="$('#banner-file').click();">Browse</button>
                </div>
            </p>
        </div>
        <div class="modal-footer">
            <button class="btn" type="button" data-dismiss="modal" aria-hidden="true">Cancel</button>
            <button class="btn btn-success">
                <i class="icon-refresh icon-spin" style="display: none"></i> Change banner image
            </button>
        </div>
    </form>

</div>

<div class="container nophonepad">
    <div id="team-data">
        <ul id="team-data-links" class="nav nav-tabs">
            <li class="active"><a href="#games" data-toggle="tab" onclick="javascript:location.hash='schedule';">Schedule</a></li>
            @if (Model.Team.Editable || Model.Team.Privacy.Roster)
            {
            <li><a href="#roster" data-toggle="tab" onclick="javascript:location.hash='roster';">Roster</a></li>
            }
            @if (Model.Team.Editable)
            {
                <li>
                <!-- ko if: AvailabilityVisible -->
                <a href="#availability" data-toggle="tab" onclick="javascript:location.hash='availability';">Availability</a>
                <!-- /ko -->
                <!-- ko ifnot: AvailabilityVisible -->
                <a class="disabled" data-toggle="tooltip" data-original-title="Will become available once you've added a dated event to your schedule and at least one member to your roster">Availability</a>
                <!-- /ko -->
                </li>
            }
        </ul>
        <div class="tab-content">
            <div id="games" class="tab-pane active">
                @Html.Partial("TeamSchedule")
            </div>
            @if (Model.Team.Editable || Model.Team.Privacy.Roster)
            {
            <div id="roster" class="tab-pane">
                @Html.Partial("TeamRoster")
            </div>
            }
            @if (Model.Team.Editable)
            {
            <div id="availability" class="tab-pane">
                @Html.Partial("TeamAvailability")
            </div>
            }
        </div>
    </div>
</div>

<script>
    var TeamLinksViewModel = function () {
        var me = this;
        
        this.AllEvents = ko.computed(function () {
            var games = [];
            _.each(teamViewModel.Seasons(), function (season) {
                _.each(season.Games(), function (game) {
                    games.push(game);
                });
            });
            return _.filter(games, function(game) { return game.DateTimeMoment() != null; });
        });
        this.AllPlayers = ko.computed(function () {
            var players = [];
            _.each(teamViewModel.PlayerGroups(), function (group) {
                _.each(group.Players(), function (player) {
                    players.push(player);
                });
            });
            return players;
        });

        // Tab toggle
        this.AvailabilityVisible = ko.computed(function () {
            return me.AllPlayers().length > 0 && me.AllEvents().length > 0;
        });
    };
    $(function() {
        window.teamLinksViewModel = new TeamLinksViewModel();
        ko.applyBindings(window.teamLinksViewModel, document.getElementById("team-data-links"));
    });

    var TeamHomeViewModel = function() {
        var me = this;
        
        // From shared storage
        this.Editable = teamViewModel.Editable;
        this.PlayerGroups = teamViewModel.PlayerGroups;
        this.Id = teamViewModel.Id;
        this.Url = teamViewModel.Url;
        this.Name = teamViewModel.Name;
        this.BannerImage = teamViewModel.BannerImage;
        this.Announcement = teamViewModel.Announcement;
        this.Settings = teamViewModel.Settings;
        this.Privacy = teamViewModel.Privacy;

        this.NewName = ko.observable(me.Name());

        this.BannerBackgroundImage = ko.computed(function() {
            return (me.BannerImage() != null) ? "url('/TeamBanners/" + me.BannerImage() + "')" : "url('/img/defaultbanner.jpg')";
        });
        this.ShowAnnouncementOptions = function (obj, event) {
            if (event.keyCode != 9) {
                $("#team-announcement .options").show();
            }
            return true;
        };
        this.SaveAnnouncement = function () {
            $("#team-announcement").find("textarea, button").prop("disabled", true);
            $("#team-announcement .icon-refresh").show();
            $.ajax({
                type: "PUT",
                url: me.Url() + "/announcement",
                data: {
                    Announcement: $("#team-announcement textarea").val()      
                },
                success: function (response) {
                    me.Announcement(response.Announcement);
                    $("#team-announcement").find("textarea, button").prop("disabled", false);
                    $("#team-announcement").find(".options, .icon-refresh").hide();
                }
            });
        };
        this.SaveSettings = function () {
            
            if (me.NewName().length == 0) {
                return window.ShowAlert("Team must have a name");
            }

            $("#team-settings-modal .icon-refresh").show();
            $("#team-settings-modal button").prop("disabled", true);

            var confirmationGroups = _.select(me.PlayerGroups(), function (group) { return group.SendConfirmations(); });
            var confirmationGroupsList = [];
            _.each(confirmationGroups, function (group) { confirmationGroupsList.push(group.Id()); });

            $.ajax({
                type: "PUT",
                url: me.Url() + "/settings", contentType: "application/json",
                data: JSON.stringify({
                    TeamId: me.Id(),
                    Name: me.NewName(),
                    Privacy: ko.mapping.toJS(me.Privacy),
                    SendConfirmations: me.Settings.ConfirmationEmailMinutes(),
                    SendConfirmationGroups: confirmationGroupsList
                }),
                success: function (response) {
                    window.location = response.Url;
                }
            });
        };
        this.SaveBanner = function () {
            
            if ($("#banner-file").val().length === 0) {
                return window.ShowAlert("Please select a valid image file");
            }

            $("#team-banner-modal .icon-refresh").show();
            $("#team-banner-modal button").prop("disabled", true);

            var file = document.getElementById("banner-file").files[0];

            // http://holyhoehle.wordpress.com/2010/09/19/uploading-files-using-ajax/
            $.ajax({
                type: "PUT", url: me.Url() + "/banner",
                processData: false,
                data: file,
                beforeSend: function(xhr) {
                    xhr.setRequestHeader("Cache-Control", "no-cache");
                    xhr.setRequestHeader("X-File-Name", file.name);
                    xhr.setRequestHeader("Content-Type", "multipart/form-data");
                },
                success: function() {
                    window.location.reload();
                },
                error: function (response) {
                    window.ShowAlert(JSON.parse(response.responseText));
                    $("#team-banner-modal .icon-refresh").hide();
                    $("#team-banner-modal button").prop("disabled", false);
                }
            });
        };
        this.DeleteTeam = function () {
            $("#team-delete-modal button").prop("disabled", true);
            $("#team-delete-modal .icon-spin").show();
            $.ajax({
                type: "DELETE",
                url: me.Url(),
                data: {},
                complete: function () {
                    window.location = "/home";
                }
            });
        };
    };
    
    $(function() {
        window.teamHomeViewModel = new TeamHomeViewModel();
        ko.applyBindings(window.teamHomeViewModel, document.getElementById("team-info"));
    });

    $("#team-announcement textarea").autosize();
    $("#banner-file").change(function() {
        $("#banner-file-name").val($(this).val());
    });
    $("#team-banner").hover(
        function () {
            $("#team-banner .hover-edit").show();
        },
        function() {
            $("#team-banner .hover-edit").hide();
        });
    
    if (location.hash != "#schedule") {
        $("#team-data .nav a[href='" + location.hash + "']").click();
    }
    
    $("#team-data-links").tooltip({ selector: "*[data-toggle='tooltip']" });
</script>