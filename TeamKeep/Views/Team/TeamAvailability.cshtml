<div class="table-container">
    <div class="table-controls">
        <div class="column-select pull-left">
            <div class="btn-group">
                <!--button class="btn">Options</!--button>-->
            </div>
        </div>
        <div class="pull-right">
            <div class="btn-group">
                <button class="btn">
                    <i class="icon-question-sign"></i>
                </button>
            </div>
            <div class="editor">
                <h5>Icons (set by manager)</h5>
                <p>
                    <i class="icon-thumbs-up"></i> &mdash; Going<br/>
                    <i class="icon-ban-circle"></i> &mdash; Not going<br/>
                    <i class="icon-question-sign"></i> &mdash; Maybe
                </p>
                <!-- coming soon
                    <h5>Email confirmation</h5>
                    <p>
                        <span class="swatch going"></span> &mdash; Confirmed going<br/>
                        <span class="swatch notgoing"></span> &mdash; Confirmed not going<br/>
                        <span class="swatch maybe"></span> &mdash; Confirmed maybe
                    </p>-->
            </div>
        </div>
        <div style="clear: both;"></div>
        
        <button id="availability-prev" class="btn btn-link" data-bind="click: EventsPrev">
            <i class="icon-chevron-left" ></i>
        </button>
        <button id="availability-next" class="btn btn-link" data-bind="click: EventsNext">
            <i class="icon-chevron-right" ></i>
        </button>
    </div>
    <table>
        <thead>
            <tr>
                <th class="max">&nbsp;</th>
                <th class="position">&nbsp;</th>
                <!-- ko if: Events().length == 0 -->
                <th>&nbsp;</th>
                <th>&nbsp;</th>
                <!-- /ko -->

                <!-- ko foreach: Events -->
                <th class="angled icon">    
                    <span>
                        <span data-bind="css: { past: IsPast() }, text: DateTimeAbbrev"></span>
                    </span>
                </th>
                <!-- /ko -->
            </tr>
        </thead>
        <tbody>
            <!-- ko foreach: PlayerGroups -->
            <!-- ko if: Players().length > 0 -->
            <tr>
                <td class="fullheading" colspan="2" data-bind="text: Name"></td>
            </tr>
                
            <!-- ko foreach: { data: Players, as: 'player' } -->
            <tr>
                <td class="max">
                    <input class="mod" type="text" data-bind="editable: false, value: FullName" />
                </td>
                <td class="position">
                    <input class="mod" type="text" data-bind="editable: false, value: Position" />
                </td>
                <!-- ko foreach: { data: $root.Events, as: 'game' } -->
                <td class="icon" data-bind="css: $root.AvailabilityCss(player, game), click: function() { $root.RotateAvailability(player, game); }">
                    <span class="mod">
                        <i data-bind="css: $root.AvailabilityIcon(player, game)"></i>
                    </span>
                </td>
                <!-- /ko -->
            </tr>
            <!-- /ko -->
            <!-- /ko -->
            <!-- /ko -->
        </tbody>
    </table>
</div>

<script>
    var AvailabilityViewModel = function () {
        var me = this;
        this.PlayerGroups = teamViewModel.PlayerGroups;
        this.Seasons = teamViewModel.Seasons;

        this.EventsIndex = ko.observable(0);
        this.EventsShown = ko.observable(10);

        // Current page
        this.AllEvents = ko.computed(function() {
            var games = [];
            _.each(teamViewModel.Seasons(), function (season) {
                _.each(season.Games(), function (game) {
                    games.push(game);
                });
            });
            var filtered = _.filter(games, function (game) { return game.DateTimeMoment() != null; });
            return _.sortBy(filtered, function (event) { return event.DateTimeMoment().unix(); });
        });
        this.EventsIndexFirstPresent = ko.computed(function () {
            var index = 0;
            _.each(me.AllEvents(), function (event, i) {
                if (!event.IsPast()) { index = i; return false; }
                return true;
            });
            return index;
        });
        this.Events = ko.computed(function() {

            var events = me.AllEvents();
            
            // create a current page (10 events)
            var begin = Math.max(0, me.EventsIndex());
            if (begin > events.length - me.EventsShown()) begin = Math.max(0, events.length - me.EventsShown());
            var end = Math.min(events.length, begin + me.EventsShown());

            var pageOfEvents = [];
            for (var i = begin; i < end; i++) {
                pageOfEvents.push(events[i]);
            }
            return pageOfEvents;
        });
        
        // Paging
        var togglePagingButtons = function () {
            if (me.AllEvents().length <= me.EventsShown()) {
                $("#availability-prev, #availability-next").hide();
            } else {
                $("#availability-prev, #availability-next").show();
                
                if (me.EventsIndex() <= 0) {
                    $("#availability-prev").prop("disabled", true);
                } else {
                    $("#availability-prev").prop("disabled", false);
                }

                if (me.AllEvents().length - me.EventsIndex() <= me.EventsShown()) {
                    $("#availability-next").prop("disabled", true);
                } else {
                    $("#availability-next").prop("disabled", false);
                }
            }
        };
        this.EventsIndex.subscribe(function () {
            togglePagingButtons();
        });
        this.EventsShown.subscribe(function () {
            togglePagingButtons();
        });
        this.AllEvents.subscribe(function () {
            togglePagingButtons();
        });
        this.EventsPrev = function () {
            me.EventsIndex(me.EventsIndex() - me.EventsShown());
        };
        this.EventsNext = function () {
            me.EventsIndex(me.EventsIndex() + me.EventsShown());
        };

        // Availability styling
        this.AvailabilityCss = function(player, game) {
            return player.AvailabilityCss(game);
        };
        this.AvailabilityIcon = function(player, game) {
            return player.AvailabilityIcon(game);
        };
        this.RotateAvailability = function (player, game) {
            player.NextAvailability(game);
        };
        
        // init
        togglePagingButtons();
        me.EventsIndex(me.EventsIndexFirstPresent());
    };
    
    $(function() {
        window.availabilityViewModel = new AvailabilityViewModel();
        ko.applyBindings(window.availabilityViewModel, document.getElementById("availability"));

        // Setup the handy-dandy help button
        var toggleHelp = function () {

            var editor = $("#availability .table-controls .editor");

            if (!editor.is(":visible")) {

                var clicked = $("#availability .table-controls .pull-right button");
                editor.css({
                    position: "absolute",
                    top: (clicked.position().top + 10) + "px",
                    left: (clicked.offset().left - 190) + "px",
                    zIndex: '1550'
                }).show();
                
                $(window).bind("mouseup.editor keyup.editor", function (docEvt) {
                    docEvt.stopPropagation();
                    var target = $(docEvt.target);
                    if (!target.hasClass("editor") && !target.is(clicked)) {
                        editor.fadeOut("fast");
                        $(window).unbind(".editor");
                    }
                });

            } else {
                editor.hide();
            }
        };
        $("#availability .table-controls .pull-right button").click(toggleHelp);
        
        // Setup sizing
        var resizeTimeout = null;
        var size = function() {
            if (resizeTimeout == null) {
                resizeTimeout = setTimeout(function () {
                    var windowWidth = $(window).width();

                    if (windowWidth < 450) {
                        if (window.availabilityViewModel.EventsShown() != 2) {
                            window.availabilityViewModel.EventsShown(2);
                            $("#availability-prev").css({
                                right: "135px"
                            });
                            $("#availability .position").hide();
                        }
                    }
                    else if (windowWidth < 775) {
                        if (window.availabilityViewModel.EventsShown() != 5) {
                            window.availabilityViewModel.EventsShown(5);
                            $("#availability-prev").css({
                                right: "255px"
                            });
                            $("#availability .position").hide();
                        }
                    }
                    else if (windowWidth < 975) {
                        if (window.availabilityViewModel.EventsShown() != 7) {
                            window.availabilityViewModel.EventsShown(7);
                            $("#availability-prev").css({
                                right: "335px"
                            });
                            $("#availability .position").show();
                        }
                    }
                    else if (windowWidth < 1175) {
                        if (window.availabilityViewModel.EventsShown() != 10) {
                            window.availabilityViewModel.EventsShown(10);
                            $("#availability-prev").css({
                                right: "457px"
                            });
                            $("#availability .position").show();
                        }
                    }
                    else if (window.availabilityViewModel.EventsShown() != 15) {
                        window.availabilityViewModel.EventsShown(15);
                        $("#availability-prev").css({
                            right: "655px"
                        });
                        $("#availability .position").show();
                    }

                    resizeTimeout = null;
                }, 100);
            }
        };
        $(window).resize(size);
        $(window).trigger("resize");

    });
</script>