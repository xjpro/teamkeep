<div class="table-container">
    <div class="table-controls">
        <div class="pull-left">
            <div class="btn-group">
                <!--button class="btn">Options</!--button>-->
            </div>
        </div>
        <div class="pull-right">
            <div class="btn-group">
                <button class="btn">
                    <i class="icon-question-sign"></i>
                </button>
            </div>
            <div class="editor">
                <h5>Icons (set by manager)</h5>
                <p>
                    <i class="icon-thumbs-up"></i> &mdash; Going<br/>
                    <i class="icon-ban-circle"></i> &mdash; Not going<br/>
                    <i class="icon-question-sign"></i> &mdash; Maybe
                </p>

                <h5>Email confirmation</h5>
                <p>
                    <span class="swatch going"></span> &mdash; Confirmed going<br/>
                    <span class="swatch notgoing"></span> &mdash; Confirmed not going<br/>
                    <span class="swatch maybe"></span> &mdash; Confirmed maybe
                </p>
            </div>
        </div>
        <div style="clear: both;"></div>
        
        <button id="availability-prev" class="btn btn-link" data-bind="click: EventsPrev">
            <i class="icon-chevron-left" ></i>
        </button>
        <button id="availability-next" class="btn btn-link" data-bind="click: EventsNext">
            <i class="icon-chevron-right" ></i>
        </button>
    </div>
    <table>
        <thead>
            <tr>
                <th class="max">&nbsp;</th>
                <!-- ko if: Settings.PositionColumn() -->
                <th class="position">&nbsp;</th>
                <!-- /ko -->
                <!-- ko if: Events().length == 0 -->
                <th>&nbsp;</th>
                <th>&nbsp;</th>
                <!-- /ko -->

                <!-- ko foreach: Events -->
                <th class="angled icon">    
                    <span>
                        <!-- ko ifnot: IsPast -->
                        <span data-toggle="modal" data-target="#email-modal" data-bind="click: function () { $root.SelectedEvent($data); }">
                            <span data-bind="text: DateTimeAbbrev"></span>
                            <button class="btn btn-link">
                                <i class="icon-envelope"></i>
                            </button>
                        </span>
                        <!-- /ko -->

                        <!-- ko if: IsPast -->
                        <span class="past" data-bind="text: DateTimeAbbrev"></span>
                        <!-- /ko -->
                    </span>
                </th>
                <!-- /ko -->
            </tr>
        </thead>
        <tbody>
            <!-- ko foreach: PlayerGroups -->
            <!-- ko if: Players().length > 0 -->
            <tr>
                <td class="fullheading" colspan="2" data-bind="text: Name"></td>
            </tr>
                
            <!-- ko foreach: { data: Players, as: 'player' } -->
            <tr>
                <td class="max">
                    <input class="mod" type="text" data-bind="editable: false, value: FullName" />
                </td>
                <!-- ko if: $root.Settings.PositionColumn() -->
                <td class="position">
                    <input class="mod" type="text" data-bind="editable: false, value: Position" />
                </td>
                <!-- /ko -->
                <!-- ko foreach: { data: $root.Events, as: 'game' } -->
                <td class="icon" data-bind="css: $root.AvailabilityCss(player, game), click: function() { $root.RotateAvailability(player, game); }">
                    <span class="mod">
                        <i data-bind="css: $root.AvailabilityIcon(player, game)"></i>
                    </span>
                </td>
                <!-- /ko -->
            </tr>
            <!-- /ko -->
            <!-- /ko -->
            <!-- /ko -->
        </tbody>
    </table>
</div>
<form id="email-modal" class="modal hide fade" data-bind="submit: SendConfirmations">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3>Send confirmation email</h3>
    </div>
    <div class="modal-body">
        
        <!-- ko with: SelectedEvent -->
        <h4 data-bind="text: 'vs. ' + (OpponentName() || '[To Be Determined]')"></h4>
        <ul class="unstyled event">
            <li><label>When:</label><span data-bind="text: When"></span></li>
            <li><label>Where:</label><span data-bind="text: Where"></span></li>
        </ul>
        <!-- /ko -->
        
        <h4>Send reminders to:</h4>
        <!-- ko foreach: PlayerGroups -->
        <!-- ko if: Players().length > 0 -->
        <ul class="unstyled">
            <li class="player-group">
                <label class="checkbox heading">
                    <input type="checkbox" data-bind="click: function() { return $root.TogglePlayerGroupSelected($element); }"/> <h5 data-bind="text: Name"></h5>
                </label>
                <ul data-bind="foreach: Players">
                    <!-- ko if: AvailabilityEmailSent($root.SelectedEvent()) == null -->
                    <label class="checkbox">
                        <input type="checkbox" data-bind="click: function () { return $root.TogglePlayerSelected($element, $data); }"/> 
                        <span data-bind="text: FullName"></span>
                    </label>   
                    <!-- /ko -->
                    <!-- ko if: AvailabilityEmailSent($root.SelectedEvent()) != null -->
                    <label class="disabled" title="Availability request email sent">
                        <i class="icon-envelope"></i>
                        <span data-bind="text: FullName, attr: { 'data-original-title': 'Email sent on ' + AvailabilityEmailSent($root.SelectedEvent()) }"></span>
                    </label>  
                    <!-- /ko -->
                </ul>
            </li>
        </ul>
        <!-- /ko -->
        <!-- /ko -->
    </div>
    <div class="modal-footer">
        <button class="btn" type="button" data-dismiss="modal" aria-hidden="true">Cancel</button>
        <button class="btn btn-success">
            <i class="icon-refresh icon-spin" style="display: none"></i> Send e-mails
        </button>
    </div>
</form>

<script>
    var AvailabilityViewModel = function () {
        var me = this;
        this.PlayerGroups = teamViewModel.PlayerGroups;
        this.Seasons = teamViewModel.Seasons;
        this.Settings = teamViewModel.Settings;

        this.EventsIndex = ko.observable(0);
        this.EventsShown = ko.observable(10);

        // Current page
        this.AllEvents = ko.computed(function() {
            var games = [];
            _.each(teamViewModel.Seasons(), function (season) {
                _.each(season.Games(), function (game) {
                    games.push(game);
                });
            });
            var filtered = _.filter(games, function (game) { return game.DateTimeMoment() != null; });
            return _.sortBy(filtered, function (event) { return event.DateTimeMoment().unix(); });
        });
        this.EventsIndexFirstPresent = ko.computed(function () {
            var index = 0;
            _.each(me.AllEvents(), function (event, i) {
                if (!event.IsPast()) { index = i; return false; }
                return true;
            });
            return index;
        });
        this.Events = ko.computed(function() {

            var events = me.AllEvents();
            
            // create a current page (10 events)
            var begin = Math.max(0, me.EventsIndex());
            if (begin > events.length - me.EventsShown()) begin = Math.max(0, events.length - me.EventsShown());
            var end = Math.min(events.length, begin + me.EventsShown());

            var pageOfEvents = [];
            for (var i = begin; i < end; i++) {
                pageOfEvents.push(events[i]);
            }
            return pageOfEvents;
        });
        
        // Paging
        var togglePagingButtons = function () {
            if (me.AllEvents().length <= me.EventsShown()) {
                $("#availability-prev, #availability-next").hide();
            } else {
                $("#availability-prev, #availability-next").show();
                
                if (me.EventsIndex() <= 0) {
                    $("#availability-prev").prop("disabled", true);
                } else {
                    $("#availability-prev").prop("disabled", false);
                }

                if (me.AllEvents().length - me.EventsIndex() <= me.EventsShown()) {
                    $("#availability-next").prop("disabled", true);
                } else {
                    $("#availability-next").prop("disabled", false);
                }
            }
        };
        this.EventsIndex.subscribe(function () {
            togglePagingButtons();
        });
        this.EventsShown.subscribe(function () {
            togglePagingButtons();
        });
        this.AllEvents.subscribe(function () {
            togglePagingButtons();
        });
        this.EventsPrev = function () {
            me.EventsIndex(me.EventsIndex() - me.EventsShown());
        };
        this.EventsNext = function () {
            me.EventsIndex(me.EventsIndex() + me.EventsShown());
        };

        // Availability styling
        this.AvailabilityCss = function(player, game) {
            return player.AvailabilityCss(game);
        };
        this.AvailabilityIcon = function(player, game) {
            return player.AvailabilityIcon(game);
        };
        this.RotateAvailability = function (player, game) {
            player.NextAvailability(game);
        };
        
        // Confirmation Emails
        this.SelectedEvent = ko.observable();
        this.SelectedPlayers = ko.observableArray([]);
        this.TogglePlayerGroupSelected = function (domElement) {
            var checked = $(domElement).is(":checked");
            var childCheckboxes = $(domElement).parentsUntil(".player-group").parent().children("ul").find("input[type='checkbox']");
            if (checked) {
                childCheckboxes.filter(":not(:checked)").click();
            } else {
                childCheckboxes.filter(":checked").click();
            }
            return true;
        };
        this.TogglePlayerSelected = function (domElement, player) {
            var selected = $(domElement).is(":checked");
            if (selected) {
                me.SelectedPlayers.push(player);
            } else {
                me.SelectedPlayers.remove(player);
            }
            return true;
        };
        this.SendConfirmations = function () {

            $("#email-modal button").prop("disabled", true);
            $("#email-modal .icon-spin").show();

            $.ajax({
                type: "POST",
                url: "/games/" + me.SelectedEvent().Id() + "/confirmations", contentType: "application/json",
                data: JSON.stringify({
                    PlayerIds: _.pluck(ko.mapping.toJS(me.SelectedPlayers()), 'Id')
                }),
                success: function (response) {
                    window.ShowAlert("Confirmation emails sent successfully", "alert-success");
                    $("#email-modal").modal("hide");
                    $("#email-modal button").prop("disabled", false);
                    $("#email-modal .icon-spin").hide();

                    _.each(response.UpdatedAvailabilities, function (ab) {
                        var player = null;
                        _.each(me.PlayerGroups(), function (group) {
                            player = group.FindPlayer(ab.PlayerId);
                            if (player != null) return false; // can stop
                        });

                        if (player != null) {
                            var koAb = ko.mapping.fromJS(ab);
                            player.Availability.remove(function (curr) { return curr.Id() == koAb.Id(); }); // if it exists, we'll replace it
                            player.Availability.push(koAb);
                        }
                    });

                    $("#email-modal input[type='checkbox']:checked").click();
                },
                error: function (response) {
                    window.ShowAlert(JSON.parse(response.responseText));
                    $("#email-modal button").prop("disabled", false);
                    $("#email-modal .icon-spin").hide();
                }
            });
        };

        // init
        togglePagingButtons();
        me.EventsIndex(me.EventsIndexFirstPresent());
    };
    
    $(function() {
        window.availabilityViewModel = new AvailabilityViewModel();
        ko.applyBindings(window.availabilityViewModel, document.getElementById("availability"));

        // Setup the handy-dandy help button
        var toggleHelp = function () {

            var editor = $("#availability .table-controls .editor");

            if (!editor.is(":visible")) {

                var clicked = $("#availability .table-controls .pull-right button");
                editor.css({
                    position: "absolute",
                    top: (clicked.position().top + 10) + "px",
                    left: (clicked.offset().left - 290) + "px",
                    zIndex: '1550',
                    width: 210 + "px"
                }).show();
                
                $(window).bind("mouseup.editor keyup.editor", function (docEvt) {
                    docEvt.stopPropagation();
                    var target = $(docEvt.target);
                    if (!target.hasClass("editor") && !target.is(clicked)) {
                        editor.fadeOut("fast");
                        $(window).unbind(".editor");
                    }
                });

            } else {
                editor.hide();
            }
        };
        $("#availability .table-controls .pull-right button").click(toggleHelp);
        
        // Setup sizing
        var resizeTimeout = null;
        var size = function() {
            if (resizeTimeout == null) {
                resizeTimeout = setTimeout(function () {
                    var windowWidth = $(window).width();

                    if (windowWidth < 450) {
                        if (window.availabilityViewModel.EventsShown() != 2) {
                            window.availabilityViewModel.EventsShown(2);
                            $("#availability-prev").css({
                                right: "135px"
                            });
                            $("#availability .position").hide();
                        }
                    }
                    else if (windowWidth < 775) {
                        if (window.availabilityViewModel.EventsShown() != 5) {
                            window.availabilityViewModel.EventsShown(5);
                            $("#availability-prev").css({
                                right: "255px"
                            });
                            $("#availability .position").hide();
                        }
                    }
                    else if (windowWidth < 975) {
                        if (window.availabilityViewModel.EventsShown() != 7) {
                            window.availabilityViewModel.EventsShown(7);
                            $("#availability-prev").css({
                                right: "335px"
                            });
                            $("#availability .position").show();
                        }
                    }
                    else if (windowWidth < 1175) {
                        if (window.availabilityViewModel.EventsShown() != 10) {
                            window.availabilityViewModel.EventsShown(10);
                            $("#availability-prev").css({
                                right: "457px"
                            });
                            $("#availability .position").show();
                        }
                    }
                    else if (window.availabilityViewModel.EventsShown() != 15) {
                        window.availabilityViewModel.EventsShown(15);
                        $("#availability-prev").css({
                            right: "655px"
                        });
                        $("#availability .position").show();
                    }

                    resizeTimeout = null;
                }, 100);
            }
        };
        $(window).resize(size);
        $(window).trigger("resize");
    });
</script>