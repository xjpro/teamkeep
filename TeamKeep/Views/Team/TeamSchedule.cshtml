@model TeamKeep.Models.ViewModels.TeamViewModel

<div class="table-container stacks">
    <div class="table-controls">
        <div class="column-select pull-left">
            <div class="btn-group">
                <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">Columns <span class="caret"></span></a>
                <ul class="dropdown-menu" data-bind="foreach: Columns">
                    <!-- ko if: Toggleable() === true -->
                    <li><a data-bind="text: ($data.ToggleName ? ToggleName() : Name()), css: { active: Visible }, click: $root.ToggleColumnVisible"></a></li>
                    <!-- /ko -->
                </ul>
            </div>
        </div>
        <!-- ko if: Editable -->
        <div class="season-select pull-right">
            <i class="icon-refresh icon-spin" style="display: none"></i> 
            <button class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                <i class="icon-plus-sign-alt"></i> Game
            </button>
            <ul class="dropdown-menu">
                <li><label class="heading">Add to...</label></li>
                <li class="divider"></li>
                <!-- ko foreach: Seasons -->
                <li><a tabindex="-1" data-bind="text: Name, click: function() { $root.AddGame(Id()); }"></a></li>
                <!-- /ko -->
                <li><a tabindex="-1" data-bind="click: function() { AddGame(); }">New season</a></li>
            </ul>
        </div>
        <!-- /ko -->
        <div style="clear: both;"></div>
    </div>
    <table>
        <thead>
            <tr data-bind="toggleHeader: Columns"></tr>
        </thead>
        <tbody>
            <!-- ko if: Seasons().length == 0 -->
            <tr>
                <td class="fullinfo" colspan="8">
                    No games have been posted for this team
                </td>
            </tr>
            <!-- /ko -->

            <!-- ko foreach: Seasons -->
            <tr>
                <td class="fullheading" colspan="8">
                    <input class="mod" type="text" data-bind="value: Name, editable: $parent.Editable, event: { focus: Selected, change: Update } "/>
                    <!-- ko if: $parent.Editable -->
                    <div class="options pull-right">
                        <!-- ko if: Order() != 0 --> 
                        <i class="icon-circle-arrow-up" title="Move season up" data-bind="click: function() { IncrementOrder(-1); }"></i>
                        <!-- /ko -->
                        <!-- ko if: Order() != $root.Seasons().length - 1 -->
                        <i class="icon-circle-arrow-down" title="Move season down" data-bind="click: function() { IncrementOrder(1); }"></i>
                        <!-- /ko -->
                        <i class="icon-trash" title="Delete season" data-toggle="modal" data-target="#season-delete-modal" data-bind="click: Selected"></i>
                    </div>
                    <!-- /ko -->
                </td>
            </tr>

            <!-- ko if: Games().length == 0 -->
            <tr><td class="fullinfo" colspan="7">There are no games in this season</td></tr>
            <!-- /ko -->

            <!-- ko template: { foreach: Games, afterAdd: ChildAdded } -->
            <tr>
                <td class="button" data-bind="visible: $root.Columns()[0].Visible">
                    <a id="dropLabel" class="dropdown-toggle" role="button" data-toggle="dropdown" data-target="#"><i class="icon-edit"></i></a>
                    <ul class="dropdown-menu" role="menu" aria-labelledby="dropLabel">
                        <li class="dropdown-submenu">
                            <a tabindex="-1">Move to</a>
                            <ul class="dropdown-menu">
                                <!-- ko foreach: $root.Seasons -->
                                    <!-- ko if: $data != $parents[1] -->
                                    <li><a tabindex="-1" data-bind="text: Name, click: function() { $parent.MoveGame($data, $element); }"></a></li>
                                    <!-- /ko -->
                                <!-- /ko -->
                                <!-- ko if: $root.Seasons().length > 1 -->
                                <li class="divider"></li>
                                <!-- /ko -->
                                <li><a tabindex="-1" data-bind="click: function() {  MoveGameToNewSeason($element); }">New season</a></li>
                            </ul>
                        </li>
                        <!--li><a tabindex="-1" data-bind="">Mark as cancelled</a></!--li-->
                        <li><a tabindex="-1" data-bind="click: RemoveGame">Remove</a></li>
                    </ul>
                </td>
                <td class="date" data-bind="visible: $root.Columns()[1].Visible">
                    <!-- ko ifnot: TeamKeep.isMobile -->
                    <input class="mod" type="text" data-bind="value: DateTime, editable: $parents[1].Editable, event: { focus: EnableDateInput }"/>
                    <!-- /ko -->
                    <!-- ko if: TeamKeep.isMobile -->
                    <input class="mod" type="datetime-local" data-bind="value: DateTime, editable: $parents[1].Editable, event: { change: Update }"/>
                    <!-- /ko -->
                </td>
                <td class="hometeam-points digit" data-bind="visible: $root.Columns()[2].Visible">
                    <input class="mod" type="text" data-bind="value: ScoredPoints, editable: $parents[1].Editable, event: { change: Update }" />
                </td>
                <td class="awayteam-points digit" data-bind="visible: $root.Columns()[3].Visible">
                    <input class="mod" type="text" data-bind="value: AllowedPoints, editable: $parents[1].Editable, event: { change: Update }" />
                </td>
                <td class="tiepoints digit" data-bind="visible: $root.Columns()[4].Visible">
                    <input class="mod" type="text" data-bind="value: TiePoints, editable: $parents[1].Editable, event: { change: Update }" />
                </td>
                <td class="max">
                    <!-- ko if: AwayTeamId() != 0 -->
                    <a data-bind="text: OpponentName, attr: { href: '/teams/' + AwayTeamId() }"></a>
                    <!-- /ko -->
                    <!-- ko if: AwayTeamId() == 0 -->
                    <input class="mod" type="text" data-bind="value: OpponentName, editable: $parents[1].Editable, event: { change: Update }" />
                    <!-- /ko -->
                </td>
                <td class="location" data-bind="visible: $root.Columns()[6].Visible">
                    <input class="mod" type="text" data-bind="value: LocationDisplay, enable: $parents[1].Editable() || LocationEditorEligible(), attr: { locid: Location.Id }" readonly="readonly" />
                    <div class="editor">
                        <!-- ko if: $parents[1].Editable() || Location.Description() -->
                        <label>Name</label>
                        <input type="text" class="js-desc" data-bind="value: Location.Description, editable: $parents[1].Editable, event: { change: Update }"/>
                        <!-- /ko -->
                        <!-- ko if: $parents[1].Editable() || Location.Street() -->
                        <label>Street</label>
                        <input type="text" class="js-street" data-bind="value: Location.Street, editable: $parents[1].Editable, event: { change: Update }"/>
                        <!-- /ko -->
                        <!-- ko if: $parents[1].Editable() || Location.City() -->
                        <label>City</label>
                        <input type="text" class="js-city" data-bind="value: Location.City, editable: $parents[1].Editable, event: { change: Update }"/>
                        <!-- /ko -->
                        <!-- ko if: $parents[1].Editable() || Location.Postal() -->
                        <label>Zip</label>
                        <input type="text" class="js-postal" data-bind="value: Location.Postal, editable: $parents[1].Editable, event: { change: Update }"/>
                        <!-- /ko -->
                        <div>
                            <button class="btn pull-right">Done</button>
                        </div>
                    </div>
                </td>
                <td class="sublocation" data-bind="visible: $root.Columns()[7].Visible">
                    <input class="mod" type="text" data-bind="value: Location.InternalLocation, editable: $parents[1].Editable, event: { change: Update }" />
                </td>
            </tr>            
            <!-- /ko -->
            <!-- /ko -->
        </tbody>
    </table>
</div>

<div id="season-delete-modal" class="modal hide fade">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3>Are you sure?</h3>
    </div>
    <div class="modal-body">
        <p>Deleting this season will also remove all the games it contains.</p>
        <p>This cannot be undone.</p>
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">Cancel</button>
        <button class="btn btn-primary" data-dismiss="modal" data-bind="click: $root.RemoveSelectedSeason">Yes, please delete</button>
    </div>
</div>

<script>

    var TeamScheduleViewModel = function() {
        var me = this;

        // From shared storage
        this.Id = teamViewModel.Id;
        this.Editable = teamViewModel.Editable;
        this.Seasons = teamViewModel.Seasons;
        this.Url = teamViewModel.Url;

        $.extend(me, new SortableCollectionDataModel(me, {
            TableElement: $("#schedule table"),
            CollectionName: "Seasons",
            ItemName: "Games"
        }));
        
        // Columns
        if (typeof localStorage["column.dateTime.visible"] === "undefined") { localStorage["column.dateTime.visible"] = true; }
        if (typeof localStorage["column.scoredPoints.visible"] === "undefined") { localStorage["column.scoredPoints.visible"] = true; }
        if (typeof localStorage["column.allowedPoints.visible"] === "undefined") { localStorage["column.allowedPoints.visible"] = true; }
        if (typeof localStorage["column.tiePoints.visible"] === "undefined") { localStorage["column.tiePoints.visible"] = true; }
        if (typeof localStorage["column.location.visible"] === "undefined") { localStorage["column.location.visible"] = true; }
        if (typeof localStorage["column.sublocation.visible"] === "undefined") { localStorage["column.sublocation.visible"] = true; }

        this.Columns = ko.observableArray([
            {
                CssClass: "button",
                Name: ko.observable(""),
                Visible: ko.observable(me.Editable()),
                Toggleable: ko.observable(false),
                SortType: null
            },
            {
                CssClass: "sort-date date", 
                Name: ko.observable("Date"),
                ToolTip: "Date and time event occurs",
                Visible: ko.observable(localStorage["column.dateTime.visible"] == "true"),
                Toggleable: ko.observable(true),
                SortType: "dateTime"
            },
            {
                Id: "sort-scoredpoints",
                CssClass: "sort-scoredpoints digit",
                Name: ko.observable("PS"),
                ToolTip: "Points scored by your team",
                Visible: ko.observable(true),
                Toggleable: ko.observable(true),
                ToggleName: ko.observable("Points scored"),
                SortType: "scoredPoints"
            },
            {
                CssClass: "sort-allowedpoints digit",
                Name: ko.observable("PA"),
                ToolTip: "Points scored by opposing team",
                Visible: ko.observable(true),
                Toggleable: ko.observable(true),
                ToggleName: ko.observable("Points scored"),
                SortType: "allowedPoints"
            },
            {
                CssClass: "sort-tiepoints digit",
                Name: ko.observable("PT"),
                ToolTip: "Points tie",
                Visible: ko.observable(true),
                Toggleable: ko.observable(teamViewModel.Settings.ResultsView() == 1),
                ToggleName: ko.observable("Points tie"),
                SortType: "tiePoints"
            },
            {
                CssClass: "sort-opponent max",
                Name: ko.observable("Opponent"),
                ToolTip: "Name of opposing team",
                Visible: ko.observable(true),
                Toggleable: ko.observable(false),
                SortType: "opponentName"
            },
            {
                CssClass: "sort-location location",
                Name: ko.observable("Location"),
                ToolTip: "Location where the event takes place",
                Visible: ko.observable(localStorage["column.location.visible"] == "true"),
                Toggleable: ko.observable(true),
                SortType: "location"
            },
            {
                CssClass: "sort-sublocation sublocation",
                Name: ko.observable("Arena"),
                ToolTip: "Field, court, or rink",
                Visible: ko.observable(teamViewModel.Settings.ArenaColumn() && localStorage["column.sublocation.visible"] == "true"),
                Toggleable: ko.observable(teamViewModel.Settings.ArenaColumn()),
                SortType: "sublocation"
            }
        ]);

        this.AssignResultValues = function (resultsView) {
            switch (resultsView) {
                case 0: // points scored / allowed
                    me.Columns()[2].Name("PS");
                    me.Columns()[2].ToolTip = "Points scored";
                    me.Columns()[2].Visible(localStorage["column.scoredPoints.visible"] == "true");
                    me.Columns()[2].Toggleable(true);
                    me.Columns()[2].ToggleName("Points scored");

                    me.Columns()[3].Name("PA");
                    me.Columns()[3].ToolTip = "Points allowed";
                    me.Columns()[3].Visible(localStorage["column.allowedPoints.visible"] == "true");
                    me.Columns()[3].Toggleable(true);
                    me.Columns()[3].ToggleName("Points allowed");

                    me.Columns()[4].Visible(false);
                    me.Columns()[4].Toggleable(false);

                    $("body").append("<style>@@media (max-width: 767px) { " +
                        "#schedule td:nth-of-type(3):before { content: 'Scored'; } " +
                        "#schedule td:nth-of-type(4):before { content: 'Allowed'; } }</style>");
                    break;
                case 1: // Best of
                    me.Columns()[2].Name("W");
                    me.Columns()[2].ToolTip = "Games won";
                    me.Columns()[2].Visible(localStorage["column.scoredPoints.visible"] == "true");
                    me.Columns()[2].Toggleable(true);
                    me.Columns()[2].ToggleName("Wins");

                    me.Columns()[3].Name("L");
                    me.Columns()[3].ToolTip = "Games lost";
                    me.Columns()[3].Visible(localStorage["column.allowedPoints.visible"] == "true");
                    me.Columns()[3].Toggleable(true);
                    me.Columns()[3].ToggleName("Losses");

                    me.Columns()[4].Name("T");
                    me.Columns()[4].ToolTip = "Games tied";
                    me.Columns()[4].Visible(localStorage["column.tiePoints.visible"] == "true");
                    me.Columns()[4].Toggleable(true);
                    me.Columns()[4].ToggleName("Ties");

                    $("body").append("<style>@@media (max-width: 767px) { " +
                        "#schedule td:nth-of-type(3):before { content: 'Win'; } " +
                        "#schedule td:nth-of-type(4):before { content: 'Loss'; } }</style>");
                    break;
                case 2: // Win/lose (binary result)
                    me.Columns()[2].Name("W/L");
                    me.Columns()[2].ToolTip = "Final result (win/loss)";
                    me.Columns()[2].Visible(localStorage["column.scoredPoints.visible"] == "true");
                    me.Columns()[2].Toggleable(true);
                    me.Columns()[2].ToggleName("Result (W/L)");

                    me.Columns()[3].Visible(false);
                    me.Columns()[3].Toggleable(false);

                    me.Columns()[4].Visible(false);
                    me.Columns()[4].Toggleable(false);
                    $("body").append("<style>@@media (max-width: 767px) { #schedule td:nth-of-type(3):before { content: 'Result'; } }</style>");
                    break;
                case 3: // no results
                    me.Columns()[2].Visible(false);
                    me.Columns()[2].Toggleable(false);

                    me.Columns()[3].Visible(false);
                    me.Columns()[3].Toggleable(false);

                    me.Columns()[4].Visible(false);
                    me.Columns()[4].Toggleable(false);
                    break;
            }
        };
        me.AssignResultValues(teamViewModel.Settings.ResultsView());

        // Observe settings changes
        teamViewModel.Settings.ResultsView.subscribe(function (value) { me.AssignResultValues(value); });
        teamViewModel.Settings.ArenaColumn.subscribe(function (value) { me.Columns()[7].Visible(value); me.Columns()[7].Toggleable(value); });

        // Seasons

        this.SelectedSeason = ko.observable(null);
        this.AddSeason = function(successCallback) {
            $.ajax({
                type: "POST", url: me.Url() + "/seasons",
                data: {
                    Type: 1,
                    Name: "Untitled Season"
                },
                success: function (response) {
                    me.Seasons.push(new SeasonViewModel(response));
                    successCallback();
                },
                error: function () {
                }
            });
        };
        this.RemoveSeason = function (removedSeason) {
            me.Seasons.remove(removedSeason);
            _.each(me.Seasons(), function(season) {
                if (season.Order() > removedSeason.Order()) {
                    season.Order(season.Order() - 1);
                }
            });
            
            $.ajax({
                type: "DELETE", url: me.Url() + "/seasons/" + removedSeason.Id(),
                data: { }
            });
        };
        this.RemoveSelectedSeason = function () {
            me.RemoveSeason(me.SelectedSeason());
        };

        // Games
        
        // seasonId =
        // -1 - add to most recent season
        // undefined - create new season and add to that
        // 1+ - add to this season id
        this.AddGame = function (seasonId) {

            $(".season-select button").prop("disabled", true);
            $(".season-select .icon-spin").show();
            
            if (typeof seasonId === "undefined" || me.Seasons().length === 0) {
                this.AddSeason(function() {
                    me.AddGame(-1); // Call this again once season has been posted
                });
                return;
            }

            var parentSeason;
            if (seasonId === -1) {
                parentSeason = me.Seasons()[me.Seasons().length - 1];
            } else {
                parentSeason = _.find(me.Seasons(), function (season) { return season.Id() == seasonId; });
            }

            $.ajax({
                type: "POST", url: "/games",
                data: {
                    HomeTeamId: me.Id(),
                    SeasonId : parentSeason.Id()
                },
                success: function (response) {
                    var newGame = new GameViewModel(response);
                    parentSeason.Games.push(newGame);
                    $(document).trigger("teamkeep.newevent");

                    $(".season-select button").prop("disabled", false);
                    $(".season-select .icon-spin").hide();
                },
                error: function () {
                    $(".season-select button").prop("disabled", false);
                    $(".season-select .icon-spin").hide();
                }
            });
        };

        // Sorting
        this.SortType = ko.observable("dateTime");
        this.SortType.subscribe(function () {
            me.Sort();
        });

        var sortTypes = {
            dateTime: {
                heading: "#schedule .sort-date",
                isDescending: false
            },
            dateTimeDescending: {
                heading: "#schedule .sort-date",
                isDescending: true
            },
            scoredPoints: {
                heading: "#schedule .sort-scoredpoints",
                isDescending: false,
            },
            scoredPointsDescending: {
                heading: "#schedule .sort-scoredpoints",
                isDescending: true,
            },
            allowedPoints: {
                heading: "#schedule .sort-allowedpoints",
                isDescending: false
            },
            allowedPointsDescending: {
                heading: "#schedule .sort-allowedpoints",
                isDescending: true
            },
            tiePoints: {
                heading: "#schedule .sort-tiepoints",
                isDescending: false
            },
            tiePointsDescending: {
                heading: "#schedule .sort-tiepoints",
                isDescending: true
            },
            opponentName: {
                heading: "#schedule .sort-opponent",
                isDescending: false
            },
            opponentNameDescending: {
                heading: "#schedule .sort-opponent",
                isDescending: true
            },
            location: {
                heading: "#schedule .sort-location",
                isDescending: false
            },
            locationDescending: {
                heading: "#schedule .sort-location",
                isDescending: true
            },
            sublocation: {
                heading: "#schedule .sort-sublocation",
                isDescending: false
            },
            sublocationDescending: {
                heading: "#schedule .sort-sublocation",
                isDescending: true
            }
        };

        this.ToggleSort = function (sortType) {
            if (sortType == "dateTime") {
                me.SortType() == "dateTime" ? me.SortType("dateTimeDescending") : me.SortType("dateTime");
            }
            else if (sortType == "scoredPoints") {
                me.SortType() == "scoredPointsDescending" ? me.SortType("scoredPoints") : me.SortType("scoredPointsDescending");
            }
            else if (sortType == "allowedPoints") {
                me.SortType() == "allowedPointsDescending" ? me.SortType("allowedPoints") : me.SortType("allowedPointsDescending");
            }
            else if (sortType == "tiePoints") {
                me.SortType() == "tiePointsDescending" ? me.SortType("tiePoints") : me.SortType("tiePointsDescending");
            }
            else if (sortType == "opponentName") {
                me.SortType() == "opponentName" ? me.SortType("opponentNameDescending") : me.SortType("opponentName");
            }
            else if (sortType == "location") {
                me.SortType() == "location" ? me.SortType("locationDescending") : me.SortType("location");
            }
            else if (sortType == "sublocation") {
                me.SortType() == "sublocation" ? me.SortType("sublocationDescending") : me.SortType("sublocation");
            }
        };
        this.Sort = function () {

            var isDescending = sortTypes[me.SortType()].isDescending;
            switch (me.SortType()) {
            case "dateTime":
            case "dateTimeDescending":
                me.SortByDate(isDescending);
                break;
            case "scoredPoints":
            case "scoredPointsDescending":
                me.SortBy("ScoredPoints", isDescending);
                break;
            case "allowedPoints":
            case "allowedPointsDescending":
                me.SortBy("AllowedPoints", isDescending);
                break;
            case "tiePoints":
            case "tiePointsDescending":
                me.SortBy("TiePoints", isDescending);
                break;
            case "opponentName":
            case "opponentNameDescending":
                me.SortBy("OpponentName", isDescending);
                break;
            case "location":
            case "locationDescending":
                me.SortBy("LocationDisplay", isDescending);
                break;
            case "sublocation":
            case "sublocationDescending":
                me.SortBy("SubLocation", isDescending);
                break;
            }

            $("#schedule .table-container th").css({ "background-image": "none" });

            var $sortedHeading = $(sortTypes[me.SortType()].heading);
            if (!isDescending) {
                $sortedHeading.css({ "background-image": "url('/img/sort-up.png')", "background-position": "top center" });
            } else {
                $sortedHeading.css({ "background-image": "url('/img/sort-down.png')", "background-position": "bottom center" });
            }
        };
    };

    $(function() {
        window.teamScheduleViewModel = new TeamScheduleViewModel();
        ko.applyBindings(window.teamScheduleViewModel, document.getElementById("schedule"));
        window.teamScheduleViewModel.Sort();
    });

    $("#schedule table").on("click, focus", "input.mod", function () {
        //$(this).select(); TODO implement this somehow
    });

    // Location editor
    $("#schedule table").on("click focus", "td.location > input.mod", function (evt) {
        evt.stopPropagation();

        if (!$(evt.target).attr("locid") && $(".editor:visible").length > 0) return;

        var clicked = $(this);
        var editor = clicked.parent().find(".editor");
        if ($(window).width() > 690) {
            editor.css({
                position: "absolute",
                top: clicked.position().top - editor.outerHeight(),
                left: clicked.position().left - editor.outerWidth() / 2,
                marginLeft: "0"
            });
        } else {
            editor.css({
                position: "fixed",
                top: "10px",
                left: "50%",
                marginLeft: "-" + editor.outerWidth()/2 + "px"
            });
        }

        editor.show().find("input:first").focus();

        $(window).bind("mouseup.editor keyup.editor", function (docEvt) {
            docEvt.stopPropagation();
            var target = $(docEvt.target);
            if (target.hasClass("editor") || target.attr("locid") === clicked.attr("locid")) return;
            if (docEvt.which === 27 || editor.find(":focus").length === 0) {
                editor.fadeOut("fast");
                $(window).unbind(".editor");
            }
        });
        $(window).bind("resize.editor", function() {
            editor.fadeOut("fast");
            $(window).unbind(".editor");
        });
        editor.find("button").one("click.editor", function() { // TODO can this trigger multple?
            editor.fadeOut("fast");
            $(window).unbind(".editor");
        });

        // http://tatiyants.com/how-to-use-json-objects-with-twitter-bootstrap-typeahead/
        $("#schedule .location input.js-desc").typeahead({
            source: function (query, process) {
                var locations = _(ko.toJS(teamViewModel.Locations()));
                process(locations.pluck("Description").compact().unique().value());
            },
            matcher: function (item) {
                if (item.toLowerCase().indexOf(this.query.trim().toLowerCase()) != -1) {
                    return true;
                }
            },
            updater: function (item) {
                var selected = _.find(ko.toJS(teamViewModel.Locations()), function(location) { 
                    return location.Description == item; 
                });
                if (selected) {
                    var parent = this.$element.parent();
                    parent.find(".js-street").val(selected.Street).change();
                    parent.find(".js-city").val(selected.City).change();
                    parent.find(".js-postal").val(selected.Postal).change();
                    parent.find("button").focus();
                }
                return item;
            },
            items: 3
        });
    });
</script>